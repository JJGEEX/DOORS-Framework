Reasons for bad accuracy
-----------------------------------
***ripped from https://cmusphinx.github.io/wiki/tutorialtuning/

***mismatch of the sample rate and the number of channels of the incoming audio or the mismatch of the incoming audio bandwidth.
	*** It must be a 16 kHz (or 8 kHz, depending on the training data), 16bit Mono (= single channel) Little-Endian file.

***The mismatch of the acoustic model. To verify this hypothesis you need to construct a language model from the test database text. Such a language model will be very good and must give you a high accuracy. If accuracy is still low, you need to work more on the acoustic model. You can use acoustic model adaptation to improve accuracy.

***The mismatch of the langauge model. You can create your own language model to match the vocabulary you are trying to decode.

***The mismatch in the dictionary and the pronuncation of the words. In that case some work must be done in the phonetic dictionary.

Searches
-----------------------------------
***ripped from https://cmusphinx.github.io/wiki/tutorialpocketsphinx/#searches

***we can search for an activation word such as "homie". Once we recongnized this we can switch to ngram search to recognize the actual command

***ps_set_search allows to activate the search that was previously added by name

keyword lists
-----------------------------------
***ripped from https://cmusphinx.github.io/wiki/tutoriallm/

***common tuning process for keyword lists
	***(1)Take a long recording with few occurrences of your keywords and some other sounds. You can take a movie sound or something else. The length of the audio should be approximately 1 hour.

	***(2)Run a keyword spotting on that file with different thresholds for every keyword, use the following command: 
	pocketsphinx_continuous -infile <your_file.wav> -keyphrase <your keyphrase> \
  -kws_threshold <your_threshold> -time yes
	***(2 cont.) The command will print many lines, some of them are keywords with detection times and confidences. You can also disable extra logs with the -logfn your_file.log option to avoid clutter.

	***(3)From your keyword spotting results count how many false alarms and missed detections youâ€™ve encountered.

	***(4)Select the threshold with the smallest amount of false alarms and missed detections.

	***(note)For the best accuracy it is better to have a keyphrase with 3-4 syllables. Too short phrases are easily confused.

Using keyword lists with PocketSphinx
-----------------------------------
***In Python you can either specify options in the configuration object or add a named search for a keyphrase:
	decoder.set_kws('keyphrase', kws_file)
	decoder.set_search('keyphrase')

Grammars
-----------------------------------
***grammars are very simple type of the language for command and control

***pretty much a logical combination of words

***EX: 
#JSGF V1.0;

grammar hello;
public <greet> = (good morning | hello) ( bhiksha | evandro | rita | will );

***They can be created with the Java Speech Grammar Format (JSGF) and usually have a file extension like .gram or .jsgf.

*** more information on this https://www.w3.org/TR/jsgf/

***using i with python
	***EX:
	decoder.set_jsgf('grammar', jsgf_file)
	decoder.set_search('grammar')


